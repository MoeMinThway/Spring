package com.jdc.demo.aspects;

import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.After;
import org.aspectj.lang.annotation.AfterReturning;
import org.aspectj.lang.annotation.AfterThrowing;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.aspectj.lang.annotation.Pointcut;
import org.springframework.context.annotation.Configuration;

@Aspect
@Configuration
public class MyConcerns {

	@Pointcut("bean(myService)")
	void myServiceBean() {
		
	}
	@Before("myServiceBean()")
	void beforeLog() {
		System.out.println("Before Execution");
	}
//	@After("myServiceBean()")
//	void afterLog() {
//		System.out.println("After Execution");
//	}
	@AfterReturning("bean(myService)")
	void afterReturning() {
		System.out.println("Return value"); // If Return ok return
	}
	@AfterThrowing("bean(myService)")
	void afterThrowing() {
		System.out.println("After Throwing value"); // If Return ok return
	}
	@After("bean(myService)")
	void afterAll ( ) {
		System.out.println("After Finally ");
	}
	@Around("bean(myService)")
	Object aroundInvoke(ProceedingJoinPoint jointPoint) {
		Object result = null ;
		System.out.println("Around before invoke");
		try {
			result =  jointPoint.proceed();
			
		} catch (Throwable e) {
			System.out.println("Around after throwing");
			throw new RuntimeException(e);
		}finally {
			System.out.println("Around Finally");
		}
		return result;
	}
}
